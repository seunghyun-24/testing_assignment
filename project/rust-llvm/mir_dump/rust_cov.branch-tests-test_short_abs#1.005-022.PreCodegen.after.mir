// MIR for `tests::test_short_abs` after PreCodegen

fn tests::test_short_abs() -> () {
    let mut _0: ();
    let mut _1: (&std::option::Option<i32>, &std::option::Option<i32>);
    let mut _2: &std::option::Option<i32>;
    let _3: std::option::Option<i32>;
    let _4: &str;
    let _5: &std::option::Option<i32>;
    let _6: &std::option::Option<i32>;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: &std::option::Option<i32>;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }

    bb0: {
        _4 = const "shortAbs";
        _3 = branch::function_branch(_4, const -5_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _11 = const branch::tests::test_short_abs::promoted[0];
        _1 = (move _2, _11);
        _5 = (_1.0: &std::option::Option<i32>);
        _6 = (_1.1: &std::option::Option<i32>);
        _7 = <Option<i32> as PartialEq>::eq(_5, _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        return;
    }

    bb4: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<Option<i32>, Option<i32>>(move _8, _5, _6, move _10) -> unwind continue;
    }
}
