// MIR for `main` before SimplifyCfg-initial

fn main() -> () {
    let mut _0: ();
    let mut _1: &[&test::TestDescAndFn];
    let mut _2: &[&test::TestDescAndFn; 4];
    let _3: &[&test::TestDescAndFn; 4];
    let _4: [&test::TestDescAndFn; 4];
    let mut _5: &test::TestDescAndFn;
    let _6: &test::TestDescAndFn;
    let _7: test::TestDescAndFn;
    let mut _8: &test::TestDescAndFn;
    let _9: &test::TestDescAndFn;
    let _10: test::TestDescAndFn;
    let mut _11: &test::TestDescAndFn;
    let _12: &test::TestDescAndFn;
    let _13: test::TestDescAndFn;
    let mut _14: &test::TestDescAndFn;
    let _15: &test::TestDescAndFn;
    let _16: test::TestDescAndFn;

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = const sort::tests::test_sort;
        _6 = &_7;
        _5 = &(*_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = const sort::tests::test_sort_double;
        _9 = &_10;
        _8 = &(*_9);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = const sort::tests::test_sort_empty;
        _12 = &_13;
        _11 = &(*_12);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = const sort::tests::test_sort_multiple;
        _15 = &_16;
        _14 = &(*_15);
        _4 = [move _5, move _8, move _11, move _14];
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        _3 = &_4;
        _2 = &(*_3);
        _1 = move _2 as &[&test::TestDescAndFn] (PointerCoercion(Unsize));
        StorageDead(_2);
        _0 = test_main_static(move _1) -> [return: bb1, unwind: bb6];
    }

    bb1: {
        StorageDead(_1);
        drop(_16) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        StorageDead(_16);
        StorageDead(_15);
        drop(_13) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        StorageDead(_13);
        StorageDead(_12);
        drop(_10) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        StorageDead(_10);
        StorageDead(_9);
        drop(_7) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }

    bb6 (cleanup): {
        drop(_16) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_13) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        drop(_10) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_7) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }
}
