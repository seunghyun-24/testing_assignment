// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn func_sort(_1: Vec<i32>) -> Vec<i32> {
    debug array => _1;
    let mut _0: std::vec::Vec<i32>;
    let _2: usize;
    let mut _3: &std::vec::Vec<i32>;
    let mut _4: std::ops::Range<usize>;
    let mut _5: std::ops::Range<usize>;
    let mut _7: std::option::Option<usize>;
    let mut _8: &mut std::ops::Range<usize>;
    let mut _9: isize;
    let mut _12: std::ops::Range<usize>;
    let mut _13: std::ops::Range<usize>;
    let mut _14: usize;
    let mut _15: (usize, bool);
    let mut _17: std::option::Option<usize>;
    let mut _18: &mut std::ops::Range<usize>;
    let mut _19: isize;
    let mut _21: bool;
    let mut _22: i32;
    let mut _23: &i32;
    let mut _24: &std::vec::Vec<i32>;
    let mut _25: usize;
    let mut _26: i32;
    let mut _27: &i32;
    let mut _28: &std::vec::Vec<i32>;
    let mut _29: bool;
    let mut _30: usize;
    let _31: ();
    let mut _32: &mut [i32];
    let mut _33: &mut std::vec::Vec<i32>;
    let mut _34: usize;
    scope 1 {
        debug len => _2;
        let mut _6: std::ops::Range<usize>;
        scope 2 {
            debug iter => _6;
            let _10: usize;
            scope 3 {
                debug i => _10;
                let mut _11: usize;
                scope 4 {
                    debug min => _11;
                    let mut _16: std::ops::Range<usize>;
                    scope 5 {
                        debug iter => _16;
                        let _20: usize;
                        scope 6 {
                            debug j => _20;
                        }
                    }
                }
            }
        }
    }

    coverage ExpressionId(0) => Expression { lhs: Counter(3), op: Subtract, rhs: Counter(4) };
    coverage ExpressionId(1) => Expression { lhs: Counter(5), op: Subtract, rhs: Counter(6) };
    coverage Code(Counter(0)) => src/sort.rs:3:1 - 4:26;
    coverage Code(Counter(1)) => src/sort.rs:5:9 - 5:10;
    coverage Code(Counter(0)) => src/sort.rs:5:17 - 5:20;
    coverage Code(Counter(1)) => src/sort.rs:6:13 - 6:24;
    coverage Code(Counter(5)) => src/sort.rs:7:13 - 7:14;
    coverage Code(Counter(1)) => src/sort.rs:7:18 - 7:30;
    coverage Code(Counter(5)) => src/sort.rs:8:16 - 8:37;
    coverage Code(Counter(6)) => src/sort.rs:8:38 - 10:14;
    coverage Code(Expression(1)) => src/sort.rs:10:14 - 10:15;
    coverage Code(Counter(3)) => src/sort.rs:12:12 - 12:20;
    coverage Code(Counter(4)) => src/sort.rs:12:21 - 14:10;
    coverage Code(Expression(0)) => src/sort.rs:14:10 - 14:11;
    coverage Code(Counter(2)) => src/sort.rs:16:5 - 17:2;

    bb0: {
        Coverage::CounterIncrement(0);
        _3 = &_1;
        _2 = Vec::<i32>::len(move _3) -> [return: bb1, unwind: bb21];
    }

    bb1: {
        _5 = std::ops::Range::<usize> { start: const 0_usize, end: _2 };
        _4 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _5) -> [return: bb2, unwind: bb21];
    }

    bb2: {
        _6 = move _4;
        goto -> bb3;
    }

    bb3: {
        _8 = &mut _6;
        _7 = <std::ops::Range<usize> as Iterator>::next(_8) -> [return: bb4, unwind: bb21];
    }

    bb4: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb6, 1: bb7, otherwise: bb5];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        Coverage::CounterIncrement(2);
        _0 = move _1;
        return;
    }

    bb7: {
        Coverage::CounterIncrement(1);
        _10 = ((_7 as Some).0: usize);
        _11 = _10;
        _15 = CheckedAdd(_10, const 1_usize);
        assert(!move (_15.1: bool), "attempt to compute `{} + {}`, which would overflow", _10, const 1_usize) -> [success: bb8, unwind: bb21];
    }

    bb8: {
        _14 = move (_15.0: usize);
        _13 = std::ops::Range::<usize> { start: move _14, end: _2 };
        _12 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _13) -> [return: bb9, unwind: bb21];
    }

    bb9: {
        _16 = move _12;
        goto -> bb10;
    }

    bb10: {
        _18 = &mut _16;
        _17 = <std::ops::Range<usize> as Iterator>::next(_18) -> [return: bb11, unwind: bb21];
    }

    bb11: {
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb12, 1: bb13, otherwise: bb5];
    }

    bb12: {
        Coverage::CounterIncrement(3);
        _30 = _11;
        _29 = Ne(move _30, _10);
        switchInt(move _29) -> [0: bb19, otherwise: bb18];
    }

    bb13: {
        Coverage::CounterIncrement(5);
        _20 = ((_17 as Some).0: usize);
        _24 = &_1;
        _25 = _11;
        _23 = <Vec<i32> as Index<usize>>::index(move _24, move _25) -> [return: bb14, unwind: bb21];
    }

    bb14: {
        _22 = (*_23);
        _28 = &_1;
        _27 = <Vec<i32> as Index<usize>>::index(move _28, _20) -> [return: bb15, unwind: bb21];
    }

    bb15: {
        _26 = (*_27);
        _21 = Gt(move _22, move _26);
        switchInt(move _21) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        Coverage::CounterIncrement(6);
        _11 = _20;
        goto -> bb10;
    }

    bb17: {
        Coverage::ExpressionUsed(1);
        goto -> bb10;
    }

    bb18: {
        Coverage::CounterIncrement(4);
        _33 = &mut _1;
        _32 = <Vec<i32> as DerefMut>::deref_mut(move _33) -> [return: bb20, unwind: bb21];
    }

    bb19: {
        Coverage::ExpressionUsed(0);
        goto -> bb3;
    }

    bb20: {
        _34 = _11;
        _31 = core::slice::<impl [i32]>::swap(_32, _10, move _34) -> [return: bb23, unwind: bb21];
    }

    bb21 (cleanup): {
        drop(_1) -> [return: bb22, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        resume;
    }

    bb23: {
        goto -> bb3;
    }
}

fn main() -> () {
    let mut _0: ();

    coverage Code(Counter(0)) => src/main.rs:16:1 - 32:2;

    bb0: {
        Coverage::CounterIncrement(0);
        return;
    }
}
