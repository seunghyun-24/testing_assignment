// MIR for `sort::func_sort` 0 renumber

fn sort::func_sort(_1: Vec<i32>) -> Vec<i32> {
    debug array => _1;
    let mut _0: std::vec::Vec<i32>;
    let _2: usize;
    let mut _3: &std::vec::Vec<i32>;
    let _4: ();
    let mut _5: std::ops::Range<usize>;
    let mut _6: std::ops::Range<usize>;
    let mut _7: usize;
    let mut _9: ();
    let _10: ();
    let mut _11: std::option::Option<usize>;
    let mut _12: &mut std::ops::Range<usize>;
    let mut _13: &mut std::ops::Range<usize>;
    let mut _14: isize;
    let mut _15: !;
    let _18: ();
    let mut _19: std::ops::Range<usize>;
    let mut _20: std::ops::Range<usize>;
    let mut _21: usize;
    let mut _22: usize;
    let mut _23: (usize, bool);
    let mut _24: usize;
    let _26: ();
    let mut _27: std::option::Option<usize>;
    let mut _28: &mut std::ops::Range<usize>;
    let mut _29: &mut std::ops::Range<usize>;
    let mut _30: isize;
    let mut _31: !;
    let mut _33: bool;
    let mut _34: i32;
    let mut _35: &i32;
    let mut _36: &std::vec::Vec<i32>;
    let mut _37: usize;
    let mut _38: i32;
    let mut _39: &i32;
    let mut _40: &std::vec::Vec<i32>;
    let mut _41: usize;
    let mut _42: usize;
    let mut _43: bool;
    let mut _44: usize;
    let mut _45: usize;
    let _46: ();
    let mut _47: &mut [i32];
    let mut _48: &mut [i32];
    let mut _49: &mut std::vec::Vec<i32>;
    let mut _50: usize;
    let mut _51: usize;
    scope 1 {
        debug len => _2;
        let mut _8: std::ops::Range<usize>;
        scope 2 {
            debug iter => _8;
            let _16: usize;
            scope 3 {
                debug i => _16;
                let mut _17: usize;
                scope 4 {
                    debug min => _17;
                    let mut _25: std::ops::Range<usize>;
                    scope 5 {
                        debug iter => _25;
                        let _32: usize;
                        scope 6 {
                            debug j => _32;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &_1;
        _2 = Vec::<i32>::len(move _3) -> [return: bb1, unwind: bb30];
    }

    bb1: {
        StorageDead(_3);
        FakeRead(ForLet(None), _2);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        _6 = std::ops::Range::<usize> { start: const 0_usize, end: move _7 };
        StorageDead(_7);
        _5 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _6) -> [return: bb2, unwind: bb30];
    }

    bb2: {
        StorageDead(_6);
        PlaceMention(_5);
        StorageLive(_8);
        _8 = move _5;
        goto -> bb3;
    }

    bb3: {
        falseUnwind -> [real: bb4, unwind: bb30];
    }

    bb4: {
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _8;
        _12 = &mut (*_13);
        _11 = <std::ops::Range<usize> as Iterator>::next(move _12) -> [return: bb5, unwind: bb30];
    }

    bb5: {
        StorageDead(_12);
        PlaceMention(_11);
        _14 = discriminant(_11);
        switchInt(move _14) -> [0: bb7, 1: bb8, otherwise: bb6];
    }

    bb6: {
        FakeRead(ForMatchedPlace(None), _11);
        unreachable;
    }

    bb7: {
        falseEdge -> [real: bb9, imaginary: bb8];
    }

    bb8: {
        StorageLive(_16);
        _16 = ((_11 as Some).0: usize);
        StorageLive(_17);
        _17 = _16;
        FakeRead(ForLet(None), _17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _16;
        _23 = CheckedAdd(_22, const 1_usize);
        assert(!move (_23.1: bool), "attempt to compute `{} + {}`, which would overflow", move _22, const 1_usize) -> [success: bb10, unwind: bb30];
    }

    bb9: {
        _4 = const ();
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        _0 = move _1;
        StorageDead(_2);
        drop(_1) -> [return: bb29, unwind: bb31];
    }

    bb10: {
        _21 = move (_23.0: usize);
        StorageDead(_22);
        StorageLive(_24);
        _24 = _2;
        _20 = std::ops::Range::<usize> { start: move _21, end: move _24 };
        StorageDead(_24);
        StorageDead(_21);
        _19 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _20) -> [return: bb11, unwind: bb30];
    }

    bb11: {
        StorageDead(_20);
        PlaceMention(_19);
        StorageLive(_25);
        _25 = move _19;
        goto -> bb12;
    }

    bb12: {
        falseUnwind -> [real: bb13, unwind: bb30];
    }

    bb13: {
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &mut _25;
        _28 = &mut (*_29);
        _27 = <std::ops::Range<usize> as Iterator>::next(move _28) -> [return: bb14, unwind: bb30];
    }

    bb14: {
        StorageDead(_28);
        PlaceMention(_27);
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb16, 1: bb17, otherwise: bb15];
    }

    bb15: {
        FakeRead(ForMatchedPlace(None), _27);
        unreachable;
    }

    bb16: {
        falseEdge -> [real: bb18, imaginary: bb17];
    }

    bb17: {
        StorageLive(_32);
        _32 = ((_27 as Some).0: usize);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &_1;
        StorageLive(_37);
        _37 = _17;
        _35 = <Vec<i32> as Index<usize>>::index(move _36, move _37) -> [return: bb19, unwind: bb30];
    }

    bb18: {
        _18 = const ();
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_43);
        StorageLive(_44);
        _44 = _17;
        StorageLive(_45);
        _45 = _16;
        _43 = Ne(move _44, move _45);
        switchInt(move _43) -> [0: bb25, otherwise: bb24];
    }

    bb19: {
        _34 = (*_35);
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &_1;
        StorageLive(_41);
        _41 = _32;
        _39 = <Vec<i32> as Index<usize>>::index(move _40, move _41) -> [return: bb20, unwind: bb30];
    }

    bb20: {
        _38 = (*_39);
        StorageDead(_41);
        StorageDead(_40);
        _33 = Gt(move _34, move _38);
        switchInt(move _33) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_42);
        _42 = _32;
        _17 = move _42;
        StorageDead(_42);
        _26 = const ();
        goto -> bb23;
    }

    bb22: {
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_34);
        _26 = const ();
        goto -> bb23;
    }

    bb23: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_26);
        _9 = const ();
        goto -> bb12;
    }

    bb24: {
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &mut _1;
        _48 = <Vec<i32> as DerefMut>::deref_mut(move _49) -> [return: bb26, unwind: bb30];
    }

    bb25: {
        StorageDead(_45);
        StorageDead(_44);
        _10 = const ();
        goto -> bb28;
    }

    bb26: {
        _47 = &mut (*_48);
        StorageDead(_49);
        StorageLive(_50);
        _50 = _16;
        StorageLive(_51);
        _51 = _17;
        _46 = core::slice::<impl [i32]>::swap(move _47, move _50, move _51) -> [return: bb27, unwind: bb30];
    }

    bb27: {
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_48);
        StorageDead(_46);
        _10 = const ();
        goto -> bb28;
    }

    bb28: {
        StorageDead(_43);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        _9 = const ();
        goto -> bb3;
    }

    bb29: {
        return;
    }

    bb30 (cleanup): {
        drop(_1) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        resume;
    }
}
