// MIR for `branch::function_branch` after SimplifyConstCondition-after-const-prop

fn branch::function_branch(_1: &str, _2: i32) -> Option<i32> {
    debug fname => _1;
    debug arg => _2;
    let mut _0: std::option::Option<i32>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: i32;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: i32;
    let mut _19: i32;
    let mut _20: i32;
    let mut _21: i32;
    let mut _22: bool;
    let mut _23: i32;
    let mut _24: bool;
    let mut _25: i32;
    let mut _26: i32;
    let mut _27: bool;
    scope 1 {
        debug b => _6;
    }

    bb0: {
        _5 = <str as PartialEq>::eq(_1, const "cond") -> [return: bb9, unwind continue];
    }

    bb1: {
        _0 = Option::<i32>::None;
        goto -> bb26;
    }

    bb2: {
        _7 = _2;
        _6 = Lt(move _7, const 0_i32);
        _9 = _6;
        switchInt(move _9) -> [0: bb11, otherwise: bb10];
    }

    bb3: {
        _4 = <str as PartialEq>::eq(_1, const "abs") -> [return: bb8, unwind continue];
    }

    bb4: {
        _18 = _2;
        _17 = Ge(move _18, const 0_i32);
        switchInt(move _17) -> [0: bb20, otherwise: bb19];
    }

    bb5: {
        _3 = <str as PartialEq>::eq(_1, const "shortAbs") -> [return: bb7, unwind continue];
    }

    bb6: {
        _25 = _2;
        _24 = Ge(move _25, const 0_i32);
        switchInt(move _24) -> [0: bb23, otherwise: bb22];
    }

    bb7: {
        switchInt(move _3) -> [0: bb1, otherwise: bb6];
    }

    bb8: {
        switchInt(move _4) -> [0: bb5, otherwise: bb4];
    }

    bb9: {
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb10: {
        _8 = _6;
        goto -> bb12;
    }

    bb11: {
        _8 = const false;
        goto -> bb12;
    }

    bb12: {
        _6 = move _8;
        _11 = _6;
        switchInt(move _11) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _10 = const true;
        goto -> bb15;
    }

    bb14: {
        _10 = _6;
        goto -> bb15;
    }

    bb15: {
        _6 = move _10;
        _12 = _6;
        _6 = move _12;
        _13 = _6;
        _6 = Not(move _13);
        _14 = _6;
        _6 = move _14;
        _16 = _6;
        switchInt(move _16) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _15 = const 0_i32;
        goto -> bb18;
    }

    bb17: {
        _15 = const 1_i32;
        goto -> bb18;
    }

    bb18: {
        _0 = Option::<i32>::Some(move _15);
        goto -> bb26;
    }

    bb19: {
        _19 = _2;
        _0 = Option::<i32>::Some(move _19);
        goto -> bb26;
    }

    bb20: {
        _21 = _2;
        _22 = Eq(_21, const i32::MIN);
        assert(!move _22, "attempt to negate `{}`, which would overflow", _21) -> [success: bb21, unwind continue];
    }

    bb21: {
        _20 = Neg(move _21);
        _0 = Option::<i32>::Some(move _20);
        goto -> bb26;
    }

    bb22: {
        _23 = _2;
        goto -> bb25;
    }

    bb23: {
        _26 = _2;
        _27 = Eq(_26, const i32::MIN);
        assert(!move _27, "attempt to negate `{}`, which would overflow", _26) -> [success: bb24, unwind continue];
    }

    bb24: {
        _23 = Neg(move _26);
        goto -> bb25;
    }

    bb25: {
        _0 = Option::<i32>::Some(move _23);
        goto -> bb26;
    }

    bb26: {
        return;
    }
}
