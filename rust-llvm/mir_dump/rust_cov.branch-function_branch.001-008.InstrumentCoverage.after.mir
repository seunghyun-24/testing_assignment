// MIR for `function_branch` after InstrumentCoverage

fn function_branch(_1: &str, _2: i32) -> Option<i32> {
    debug fname => _1;
    debug arg => _2;
    let mut _0: std::option::Option<i32>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: i32;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: i32;
    let mut _20: i32;
    let mut _21: i32;
    let mut _22: i32;
    let mut _23: bool;
    let mut _24: i32;
    let mut _25: bool;
    let mut _26: i32;
    let mut _27: i32;
    let mut _28: bool;
    scope 1 {
        debug b => _6;
    }

    coverage ExpressionId(0) => Expression { lhs: Counter(0), op: Subtract, rhs: Counter(1) };
    coverage ExpressionId(1) => Expression { lhs: Expression(0), op: Subtract, rhs: Counter(2) };
    coverage ExpressionId(2) => Expression { lhs: Counter(1), op: Subtract, rhs: Counter(3) };
    coverage ExpressionId(3) => Expression { lhs: Expression(1), op: Subtract, rhs: Counter(4) };
    coverage ExpressionId(4) => Expression { lhs: Counter(5), op: Add, rhs: Counter(6) };
    coverage ExpressionId(5) => Expression { lhs: Counter(7), op: Add, rhs: Counter(8) };
    coverage ExpressionId(6) => Expression { lhs: Expression(4), op: Add, rhs: Expression(5) };
    coverage ExpressionId(7) => Expression { lhs: Counter(9), op: Add, rhs: Counter(10) };
    coverage ExpressionId(8) => Expression { lhs: Expression(6), op: Add, rhs: Expression(7) };
    coverage ExpressionId(9) => Expression { lhs: Expression(8), op: Add, rhs: Expression(3) };
    coverage ExpressionId(10) => Expression { lhs: Counter(3), op: Add, rhs: Expression(2) };
    coverage ExpressionId(11) => Expression { lhs: Expression(10), op: Subtract, rhs: Counter(11) };
    coverage ExpressionId(12) => Expression { lhs: Counter(11), op: Add, rhs: Expression(11) };
    coverage ExpressionId(13) => Expression { lhs: Expression(12), op: Subtract, rhs: Counter(12) };
    coverage ExpressionId(14) => Expression { lhs: Counter(12), op: Add, rhs: Expression(13) };
    coverage Code(Counter(0)) => src/branch.rs:3:1 - 5:15;
    coverage Code(Counter(1)) => src/branch.rs:6:17 - 7:18;
    coverage Code(Counter(3)) => src/branch.rs:7:22 - 7:23;
    coverage Code(Expression(10)) => src/branch.rs:8:17 - 8:18;
    coverage Code(Expression(11)) => src/branch.rs:8:22 - 8:23;
    coverage Code(Expression(12)) => src/branch.rs:9:13 - 12:21;
    coverage Code(Counter(12)) => src/branch.rs:12:24 - 12:25;
    coverage Code(Expression(13)) => src/branch.rs:12:35 - 12:36;
    coverage Code(Expression(14)) => src/branch.rs:14:21 - 14:22;
    coverage Code(Counter(5)) => src/branch.rs:14:25 - 14:26;
    coverage Code(Counter(6)) => src/branch.rs:14:36 - 14:37;
    coverage Code(Expression(0)) => src/branch.rs:16:9 - 16:14;
    coverage Code(Counter(2)) => src/branch.rs:17:16 - 17:24;
    coverage Code(Counter(7)) => src/branch.rs:18:17 - 18:26;
    coverage Code(Counter(8)) => src/branch.rs:20:17 - 20:27;
    coverage Code(Expression(1)) => src/branch.rs:23:9 - 23:19;
    coverage Code(Counter(4)) => src/branch.rs:23:31 - 23:39;
    coverage Code(Counter(9)) => src/branch.rs:23:42 - 23:45;
    coverage Code(Counter(10)) => src/branch.rs:23:55 - 23:59;
    coverage Code(Expression(3)) => src/branch.rs:24:14 - 24:18;
    coverage Code(Expression(9)) => src/branch.rs:26:1 - 26:2;

    bb0: {
        Coverage::CounterIncrement(0);
        PlaceMention(_1);
        _5 = <str as PartialEq>::eq(_1, const "cond") -> [return: bb9, unwind: bb34];
    }

    bb1: {
        Coverage::ExpressionUsed(3);
        _0 = Option::<i32>::None;
        goto -> bb33;
    }

    bb2: {
        Coverage::CounterIncrement(1);
        falseEdge -> [real: bb10, imaginary: bb3];
    }

    bb3: {
        Coverage::ExpressionUsed(0);
        _4 = <str as PartialEq>::eq(_1, const "abs") -> [return: bb8, unwind: bb34];
    }

    bb4: {
        Coverage::CounterIncrement(2);
        falseEdge -> [real: bb23, imaginary: bb5];
    }

    bb5: {
        Coverage::ExpressionUsed(1);
        _3 = <str as PartialEq>::eq(_1, const "shortAbs") -> [return: bb7, unwind: bb34];
    }

    bb6: {
        Coverage::CounterIncrement(4);
        falseEdge -> [real: bb28, imaginary: bb1];
    }

    bb7: {
        switchInt(move _3) -> [0: bb1, otherwise: bb6];
    }

    bb8: {
        switchInt(move _4) -> [0: bb5, otherwise: bb4];
    }

    bb9: {
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb10: {
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        _6 = Lt(move _7, const 0_i32);
        StorageDead(_7);
        FakeRead(ForLet(None), _6);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _6;
        switchInt(move _9) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        Coverage::CounterIncrement(3);
        _8 = _6;
        goto -> bb13;
    }

    bb12: {
        _8 = const false;
        goto -> bb13;
    }

    bb13: {
        Coverage::ExpressionUsed(10);
        StorageDead(_9);
        _6 = move _8;
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _6;
        switchInt(move _11) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        Coverage::CounterIncrement(11);
        _10 = const true;
        goto -> bb16;
    }

    bb15: {
        Coverage::ExpressionUsed(11);
        _10 = _6;
        goto -> bb16;
    }

    bb16: {
        Coverage::ExpressionUsed(12);
        StorageDead(_11);
        _6 = move _10;
        StorageDead(_10);
        StorageLive(_12);
        _12 = _6;
        _6 = move _12;
        StorageDead(_12);
        StorageLive(_13);
        _13 = _6;
        _6 = Not(move _13);
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _6;
        switchInt(move _15) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        Coverage::CounterIncrement(12);
        _14 = _6;
        goto -> bb19;
    }

    bb18: {
        Coverage::ExpressionUsed(13);
        _14 = _6;
        goto -> bb19;
    }

    bb19: {
        Coverage::ExpressionUsed(14);
        StorageDead(_15);
        _6 = move _14;
        StorageDead(_14);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _6;
        switchInt(move _17) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        Coverage::CounterIncrement(5);
        _16 = const 0_i32;
        goto -> bb22;
    }

    bb21: {
        Coverage::CounterIncrement(6);
        _16 = const 1_i32;
        goto -> bb22;
    }

    bb22: {
        StorageDead(_17);
        _0 = Option::<i32>::Some(move _16);
        StorageDead(_16);
        StorageDead(_6);
        goto -> bb33;
    }

    bb23: {
        StorageLive(_18);
        StorageLive(_19);
        _19 = _2;
        _18 = Ge(move _19, const 0_i32);
        switchInt(move _18) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        Coverage::CounterIncrement(7);
        StorageDead(_19);
        StorageLive(_20);
        _20 = _2;
        _0 = Option::<i32>::Some(move _20);
        StorageDead(_20);
        goto -> bb27;
    }

    bb25: {
        Coverage::CounterIncrement(8);
        StorageDead(_19);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _2;
        _23 = Eq(_22, const i32::MIN);
        assert(!move _23, "attempt to negate `{}`, which would overflow", _22) -> [success: bb26, unwind: bb34];
    }

    bb26: {
        _21 = Neg(move _22);
        StorageDead(_22);
        _0 = Option::<i32>::Some(move _21);
        StorageDead(_21);
        goto -> bb27;
    }

    bb27: {
        StorageDead(_18);
        goto -> bb33;
    }

    bb28: {
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _2;
        _25 = Ge(move _26, const 0_i32);
        switchInt(move _25) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        Coverage::CounterIncrement(9);
        StorageDead(_26);
        _24 = _2;
        goto -> bb32;
    }

    bb30: {
        Coverage::CounterIncrement(10);
        StorageDead(_26);
        StorageLive(_27);
        _27 = _2;
        _28 = Eq(_27, const i32::MIN);
        assert(!move _28, "attempt to negate `{}`, which would overflow", _27) -> [success: bb31, unwind: bb34];
    }

    bb31: {
        _24 = Neg(move _27);
        StorageDead(_27);
        goto -> bb32;
    }

    bb32: {
        StorageDead(_25);
        _0 = Option::<i32>::Some(move _24);
        StorageDead(_24);
        goto -> bb33;
    }

    bb33: {
        Coverage::ExpressionUsed(9);
        return;
    }

    bb34 (cleanup): {
        resume;
    }
}
