// MIR for `example` after runtime-optimized

fn example(_1: i32) -> i32 {
    debug x => _1;
    let mut _0: i32;
    let mut _2: i32;
    let mut _3: bool;
    let _4: i32;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &&i32;
    let _13: &i32;
    let mut _14: &[core::fmt::rt::Placeholder];
    let _15: &[core::fmt::rt::Placeholder; 1];
    let _16: [core::fmt::rt::Placeholder; 1];
    let mut _17: core::fmt::rt::Placeholder;
    let mut _18: core::fmt::rt::Alignment;
    let mut _19: core::fmt::rt::Count;
    let mut _20: core::fmt::rt::Count;
    let mut _21: core::fmt::rt::UnsafeArg;
    scope 1 {
        debug tmp => _4;
        let mut _22: &[&str; 2];
    }

    coverage ExpressionId(0) => Expression { lhs: Counter(0), op: Subtract, rhs: Counter(1) };
    coverage ExpressionId(1) => Expression { lhs: Counter(1), op: Add, rhs: Expression(0) };
    coverage Code(Counter(0)) => src/main.rs:6:1 - 6:27;
    coverage Code(Expression(1)) => src/main.rs:7:5 - 7:9;
    coverage Code(Counter(0)) => src/main.rs:8:8 - 8:13;
    coverage Code(Counter(1)) => src/main.rs:9:9 - 9:11;
    coverage Code(Expression(0)) => src/main.rs:11:9 - 11:12;
    coverage Code(Expression(1)) => src/main.rs:14:1 - 14:2;

    bb0: {
        Coverage::CounterIncrement(0);
        _3 = Gt(_1, const 0_i32);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        Coverage::CounterIncrement(1);
        _2 = const 10_i32;
        goto -> bb3;
    }

    bb2: {
        Coverage::ExpressionUsed(0);
        _2 = const -10_i32;
        goto -> bb3;
    }

    bb3: {
        Coverage::ExpressionUsed(1);
        _4 = _2;
        _22 = const example::promoted[0];
        _7 = _22 as &[&str] (PointerCoercion(Unsize));
        _13 = &_4;
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_debug::<&i32>(_12) -> [return: bb4, unwind continue];
    }

    bb4: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _18 = core::fmt::rt::Alignment::Unknown;
        _19 = core::fmt::rt::Count::Implied;
        _20 = core::fmt::rt::Count::Implied;
        _17 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _18, const 4_u32, move _19, move _20) -> [return: bb5, unwind continue];
    }

    bb5: {
        _16 = [move _17];
        _15 = &_16;
        _14 = _15 as &[core::fmt::rt::Placeholder] (PointerCoercion(Unsize));
        _21 = core::fmt::rt::UnsafeArg::new() -> [return: bb6, unwind continue];
    }

    bb6: {
        _6 = Arguments::<'_>::new_v1_formatted(move _7, move _8, move _14, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb7, unwind continue];
    }

    bb7: {
        _5 = _eprint(move _6) -> [return: bb8, unwind continue];
    }

    bb8: {
        _0 = _4;
        return;
    }
}
