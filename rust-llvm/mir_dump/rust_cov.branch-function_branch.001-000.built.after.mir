// MIR for `branch::function_branch` after built

fn branch::function_branch(_1: &str, _2: i32) -> Option<i32> {
    debug fname => _1;
    debug arg => _2;
    let mut _0: std::option::Option<i32>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: i32;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: i32;
    let mut _20: i32;
    let mut _21: i32;
    let mut _22: i32;
    let mut _23: bool;
    let mut _24: i32;
    let mut _25: bool;
    let mut _26: i32;
    let mut _27: i32;
    let mut _28: bool;
    scope 1 {
        debug b => _6;
    }

    bb0: {
        PlaceMention(_1);
        _5 = <str as PartialEq>::eq(_1, const "cond") -> [return: bb14, unwind: bb45];
    }

    bb1: {
        FakeRead(ForMatchedPlace(None), _1);
        unreachable;
    }

    bb2: {
        _0 = Option::<i32>::None;
        goto -> bb44;
    }

    bb3: {
        goto -> bb1;
    }

    bb4: {
        falseEdge -> [real: bb15, imaginary: bb6];
    }

    bb5: {
        goto -> bb2;
    }

    bb6: {
        _4 = <str as PartialEq>::eq(_1, const "abs") -> [return: bb13, unwind: bb45];
    }

    bb7: {
        falseEdge -> [real: bb32, imaginary: bb9];
    }

    bb8: {
        goto -> bb2;
    }

    bb9: {
        _3 = <str as PartialEq>::eq(_1, const "shortAbs") -> [return: bb12, unwind: bb45];
    }

    bb10: {
        falseEdge -> [real: bb38, imaginary: bb2];
    }

    bb11: {
        goto -> bb2;
    }

    bb12: {
        switchInt(move _3) -> [0: bb2, otherwise: bb10];
    }

    bb13: {
        switchInt(move _4) -> [0: bb9, otherwise: bb7];
    }

    bb14: {
        switchInt(move _5) -> [0: bb6, otherwise: bb4];
    }

    bb15: {
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        _6 = Lt(move _7, const 0_i32);
        StorageDead(_7);
        FakeRead(ForLet(None), _6);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _6;
        switchInt(move _9) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _8 = _6;
        goto -> bb19;
    }

    bb17: {
        goto -> bb18;
    }

    bb18: {
        _8 = const false;
        goto -> bb19;
    }

    bb19: {
        StorageDead(_9);
        _6 = move _8;
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _6;
        switchInt(move _11) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _10 = const true;
        goto -> bb23;
    }

    bb21: {
        goto -> bb22;
    }

    bb22: {
        _10 = _6;
        goto -> bb23;
    }

    bb23: {
        StorageDead(_11);
        _6 = move _10;
        StorageDead(_10);
        StorageLive(_12);
        _12 = _6;
        _6 = move _12;
        StorageDead(_12);
        StorageLive(_13);
        _13 = _6;
        _6 = Not(move _13);
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _6;
        switchInt(move _15) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _14 = _6;
        goto -> bb27;
    }

    bb25: {
        goto -> bb26;
    }

    bb26: {
        _14 = _6;
        goto -> bb27;
    }

    bb27: {
        StorageDead(_15);
        _6 = move _14;
        StorageDead(_14);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _6;
        switchInt(move _17) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _16 = const 0_i32;
        goto -> bb31;
    }

    bb29: {
        goto -> bb30;
    }

    bb30: {
        _16 = const 1_i32;
        goto -> bb31;
    }

    bb31: {
        StorageDead(_17);
        _0 = Option::<i32>::Some(move _16);
        StorageDead(_16);
        StorageDead(_6);
        goto -> bb44;
    }

    bb32: {
        StorageLive(_18);
        StorageLive(_19);
        _19 = _2;
        _18 = Ge(move _19, const 0_i32);
        switchInt(move _18) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        StorageDead(_19);
        StorageLive(_20);
        _20 = _2;
        _0 = Option::<i32>::Some(move _20);
        StorageDead(_20);
        goto -> bb37;
    }

    bb34: {
        goto -> bb35;
    }

    bb35: {
        StorageDead(_19);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _2;
        _23 = Eq(_22, const i32::MIN);
        assert(!move _23, "attempt to negate `{}`, which would overflow", _22) -> [success: bb36, unwind: bb45];
    }

    bb36: {
        _21 = Neg(move _22);
        StorageDead(_22);
        _0 = Option::<i32>::Some(move _21);
        StorageDead(_21);
        goto -> bb37;
    }

    bb37: {
        StorageDead(_18);
        goto -> bb44;
    }

    bb38: {
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _2;
        _25 = Ge(move _26, const 0_i32);
        switchInt(move _25) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        StorageDead(_26);
        _24 = _2;
        goto -> bb43;
    }

    bb40: {
        goto -> bb41;
    }

    bb41: {
        StorageDead(_26);
        StorageLive(_27);
        _27 = _2;
        _28 = Eq(_27, const i32::MIN);
        assert(!move _28, "attempt to negate `{}`, which would overflow", _27) -> [success: bb42, unwind: bb45];
    }

    bb42: {
        _24 = Neg(move _27);
        StorageDead(_27);
        goto -> bb43;
    }

    bb43: {
        StorageDead(_25);
        _0 = Option::<i32>::Some(move _24);
        StorageDead(_24);
        goto -> bb44;
    }

    bb44: {
        return;
    }

    bb45 (cleanup): {
        resume;
    }
}
