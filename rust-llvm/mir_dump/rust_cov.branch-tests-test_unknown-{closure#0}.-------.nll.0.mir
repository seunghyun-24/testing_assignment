// MIR for `tests::test_unknown::{closure#0}` 0 nll

| Free Region Mapping
| '?0 | Global | ['?0, '?2, '?1]
| '?1 | Local | ['?2, '?1]
| '?2 | Local | ['?2]
|
| Inferred Region Values
| '?0 | U0 | {bb0[0..=1], bb1[0], bb2[0..=1], bb3[0], '?0, '?1, '?2}
| '?1 | U0 | {bb0[0..=1], bb1[0], bb2[0..=1], bb3[0], '?1}
| '?2 | U0 | {bb0[0..=1], bb1[0], bb2[0..=1], bb3[0], '?2}
| '?3 | U0 | {bb0[0..=1], bb1[0], bb2[0..=1], bb3[0], '?1}
|
| Inference Constraints
| '?0 live at {bb0[0..=1], bb1[0], bb2[0..=1], bb3[0]}
| '?1 live at {bb0[0..=1], bb1[0], bb2[0..=1], bb3[0]}
| '?2 live at {bb0[0..=1], bb1[0], bb2[0..=1], bb3[0]}
| '?1: '?3 due to BoringNoLocation at All(src/branch.rs:48:5: 50:6) (src/branch.rs:48:5: 50:6 (#8)
| '?3: '?1 due to BoringNoLocation at All(src/branch.rs:48:5: 50:6) (src/branch.rs:48:5: 50:6 (#8)
|
fn tests::test_unknown::{closure#0}(_1: &{closure@src/branch.rs:48:5: 50:6}) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>;
    let mut _2: ();

    bb0: {
        StorageLive(_2);
        _2 = tests::test_unknown() -> [return: bb1, unwind: bb3];
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        StorageDead(_2);
        return;
    }

    bb3 (cleanup): {
        resume;
    }
}
