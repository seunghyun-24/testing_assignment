// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn function_branch(_1: &str, _2: i32) -> Option<i32> {
    debug fname => _1;
    debug arg => _2;
    let mut _0: std::option::Option<i32>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: i32;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: i32;
    let mut _19: bool;
    let mut _20: i32;
    let mut _21: bool;
    let mut _22: bool;
    scope 1 {
        debug b => _6;
    }

    coverage ExpressionId(0) => Expression { lhs: Counter(0), op: Subtract, rhs: Counter(1) };
    coverage ExpressionId(1) => Expression { lhs: Expression(0), op: Subtract, rhs: Counter(2) };
    coverage ExpressionId(2) => Expression { lhs: Counter(1), op: Subtract, rhs: Counter(3) };
    coverage ExpressionId(3) => Expression { lhs: Expression(1), op: Subtract, rhs: Counter(4) };
    coverage ExpressionId(4) => Expression { lhs: Counter(5), op: Add, rhs: Counter(6) };
    coverage ExpressionId(5) => Expression { lhs: Counter(7), op: Add, rhs: Counter(8) };
    coverage ExpressionId(6) => Expression { lhs: Expression(4), op: Add, rhs: Expression(5) };
    coverage ExpressionId(7) => Expression { lhs: Counter(9), op: Add, rhs: Counter(10) };
    coverage ExpressionId(8) => Expression { lhs: Expression(6), op: Add, rhs: Expression(7) };
    coverage ExpressionId(9) => Expression { lhs: Expression(8), op: Add, rhs: Expression(3) };
    coverage ExpressionId(10) => Expression { lhs: Counter(3), op: Add, rhs: Expression(2) };
    coverage ExpressionId(11) => Expression { lhs: Expression(10), op: Subtract, rhs: Counter(11) };
    coverage ExpressionId(12) => Expression { lhs: Counter(11), op: Add, rhs: Expression(11) };
    coverage ExpressionId(13) => Expression { lhs: Expression(12), op: Subtract, rhs: Counter(12) };
    coverage ExpressionId(14) => Expression { lhs: Counter(12), op: Add, rhs: Expression(13) };
    coverage Code(Counter(0)) => src/branch.rs:3:1 - 5:15;
    coverage Code(Counter(1)) => src/branch.rs:6:17 - 7:18;
    coverage Code(Counter(3)) => src/branch.rs:7:22 - 7:23;
    coverage Code(Expression(10)) => src/branch.rs:8:17 - 8:18;
    coverage Code(Expression(11)) => src/branch.rs:8:22 - 8:23;
    coverage Code(Expression(12)) => src/branch.rs:9:13 - 12:21;
    coverage Code(Counter(12)) => src/branch.rs:12:24 - 12:25;
    coverage Code(Expression(13)) => src/branch.rs:12:35 - 12:36;
    coverage Code(Expression(14)) => src/branch.rs:14:21 - 14:22;
    coverage Code(Counter(5)) => src/branch.rs:14:25 - 14:26;
    coverage Code(Counter(6)) => src/branch.rs:14:36 - 14:37;
    coverage Code(Expression(0)) => src/branch.rs:16:9 - 16:14;
    coverage Code(Counter(2)) => src/branch.rs:17:16 - 17:24;
    coverage Code(Counter(7)) => src/branch.rs:18:17 - 18:26;
    coverage Code(Counter(8)) => src/branch.rs:20:17 - 20:27;
    coverage Code(Expression(1)) => src/branch.rs:23:9 - 23:19;
    coverage Code(Counter(4)) => src/branch.rs:23:31 - 23:39;
    coverage Code(Counter(9)) => src/branch.rs:23:42 - 23:45;
    coverage Code(Counter(10)) => src/branch.rs:23:55 - 23:59;
    coverage Code(Expression(3)) => src/branch.rs:24:14 - 24:18;
    coverage Code(Expression(9)) => src/branch.rs:26:1 - 26:2;

    bb0: {
        Coverage::CounterIncrement(0);
        _5 = <str as PartialEq>::eq(_1, const "cond") -> [return: bb9, unwind continue];
    }

    bb1: {
        Coverage::ExpressionUsed(3);
        _0 = Option::<i32>::None;
        goto -> bb29;
    }

    bb2: {
        Coverage::CounterIncrement(1);
        _6 = Lt(_2, const 0_i32);
        _8 = _6;
        switchInt(move _8) -> [0: bb11, otherwise: bb10];
    }

    bb3: {
        Coverage::ExpressionUsed(0);
        _4 = <str as PartialEq>::eq(_1, const "abs") -> [return: bb8, unwind continue];
    }

    bb4: {
        Coverage::CounterIncrement(2);
        _17 = Ge(_2, const 0_i32);
        switchInt(move _17) -> [0: bb23, otherwise: bb22];
    }

    bb5: {
        Coverage::ExpressionUsed(1);
        _3 = <str as PartialEq>::eq(_1, const "shortAbs") -> [return: bb7, unwind continue];
    }

    bb6: {
        Coverage::CounterIncrement(4);
        _21 = Ge(_2, const 0_i32);
        switchInt(move _21) -> [0: bb26, otherwise: bb25];
    }

    bb7: {
        switchInt(move _3) -> [0: bb1, otherwise: bb6];
    }

    bb8: {
        switchInt(move _4) -> [0: bb5, otherwise: bb4];
    }

    bb9: {
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb10: {
        Coverage::CounterIncrement(3);
        _7 = _6;
        goto -> bb12;
    }

    bb11: {
        _7 = const false;
        goto -> bb12;
    }

    bb12: {
        Coverage::ExpressionUsed(10);
        _6 = move _7;
        _10 = _6;
        switchInt(move _10) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        Coverage::CounterIncrement(11);
        _9 = const true;
        goto -> bb15;
    }

    bb14: {
        Coverage::ExpressionUsed(11);
        _9 = _6;
        goto -> bb15;
    }

    bb15: {
        Coverage::ExpressionUsed(12);
        _6 = move _9;
        _11 = _6;
        _6 = move _11;
        _12 = _6;
        _6 = Not(move _12);
        _14 = _6;
        switchInt(move _14) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        Coverage::CounterIncrement(12);
        _13 = _6;
        goto -> bb18;
    }

    bb17: {
        Coverage::ExpressionUsed(13);
        _13 = _6;
        goto -> bb18;
    }

    bb18: {
        Coverage::ExpressionUsed(14);
        _6 = move _13;
        _16 = _6;
        switchInt(move _16) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        Coverage::CounterIncrement(5);
        _15 = const 0_i32;
        goto -> bb21;
    }

    bb20: {
        Coverage::CounterIncrement(6);
        _15 = const 1_i32;
        goto -> bb21;
    }

    bb21: {
        _0 = Option::<i32>::Some(move _15);
        goto -> bb29;
    }

    bb22: {
        Coverage::CounterIncrement(7);
        _0 = Option::<i32>::Some(_2);
        goto -> bb29;
    }

    bb23: {
        Coverage::CounterIncrement(8);
        _19 = Eq(_2, const i32::MIN);
        assert(!move _19, "attempt to negate `{}`, which would overflow", _2) -> [success: bb24, unwind continue];
    }

    bb24: {
        _18 = Neg(_2);
        _0 = Option::<i32>::Some(move _18);
        goto -> bb29;
    }

    bb25: {
        Coverage::CounterIncrement(9);
        _20 = _2;
        goto -> bb28;
    }

    bb26: {
        Coverage::CounterIncrement(10);
        _22 = Eq(_2, const i32::MIN);
        assert(!move _22, "attempt to negate `{}`, which would overflow", _2) -> [success: bb27, unwind continue];
    }

    bb27: {
        _20 = Neg(_2);
        goto -> bb28;
    }

    bb28: {
        _0 = Option::<i32>::Some(move _20);
        goto -> bb29;
    }

    bb29: {
        Coverage::ExpressionUsed(9);
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    coverage Code(Counter(0)) => src/main.rs:16:1 - 32:2;

    bb0: {
        Coverage::CounterIncrement(0);
        return;
    }
}
